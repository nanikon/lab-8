package ru.nanikon.FlatCollection.texts;

import java.util.ListResourceBundle;

public class Text_en_US extends ListResourceBundle {
    public Object[][] getContents() { return contents; }
    private Object[][] contents = {
            {"appTitle", "Flat collection"},
            {"russianLanguage", "Russian"},
            {"slovakLanguage", "Slovak"},
            {"danishLanguage", "Danish"},
            {"spanishLanguage", "Spanish"},
            {"englishLanguage", "English"},
            {"exit", "Exit"},
            {"logIn", "Log in"},
            {"register", "Registration"},
            {"back", "back"},
            {"login", "login"},
            {"password", "password"},
            {"password_again", "Repeate password"},
            {"send", "Send"},
            {"wrong_password", "Oh.., you didn't guessed the password!"},
            {"wrong_double_password", "Passwords aren't equal!"},
            {"not_found_login", "There is no user with such login"},
            {"wrong_login", "User with such login already exist"},
            {"logIn_problem", "There were some problems while sign in. Try to sign in later"},
            {"success_logIn", "You have succsesfuly sign in"},
            {"register_problem", "Registration faied. Try later"},
            {"success_register", "User successfully registered"},
            {"change_view", "Change view"},
            {"logout", "Exit from account"},
            {"add", "Add"},
            {"update", "Update"},
            {"remove_by_id", "Remove by id"},
            {"remove_any_by_transport", "Remove any by transport"},
            {"clear", "Clear"},
            {"filter", "Filter"},
            {"average", "Average amount of rooms"},
            {"info", "Info"},
            {"history", "History"},
            {"help", "Help"},
            {"execute_script", "Execute script"},
            {"id", "id"},
            {"name", "Name"},
            {"x", "Coordinate x"},
            {"y", "Coordinate y"},
            {"creationDate", "creation date"},
            {"area", "Area"},
            {"numberOfRooms", "Number of rooms"},
            {"centralHeating", "is heated"},
            {"view", "Вид из окон"},
            {"transport", "Level of transport noize"},
            {"houseName", "House name"},
            {"year", "Year of foundation of the house"},
            {"numberOfFloors", "Number of floors"},
            {"owner", "Owner"},
            {"flat", "Flat"},
            {"as_who", "You loged in as: "},
            {"log_out_message", "You successfully exited from (window) account"},
            {"cancel", "Cancel"},
            {"doYouWantToExit", "Are you sure you going to exit?"},
            {"clear_null", "Unable to clear collection: threre is no elements in it"},
            {"clear_success", "Collection successfully cleard (only from your elements)"},
            {"clear_fail", "Unable to clear collection"},
            {"login_password_wrong", "Ohh, you have screwed up. We can't find login or password. Sign in correctly!"},
            {"continueOK", "Ok"},
            {"info_title", "Collection info:"},
            {"type_info", "objects type: "},
            {"size_info", "account of elements: "},
            {"help_title", "Script command reference:"},
            {"info_help", "print information about the collection (type, number of elements)"},
            {"help_help", "display help for available commands"},
            {"add_help", "add new item to collection"},
            {"average_help", "print the average value of the numberOfRooms field for all elements of the collection"},
            {"clear_help", "clear collection"},
            {"exit_help", "terminate programm"},
            {"filter_help", "display elements whose view field value is less than the specified one"},
            {"history_help", "print the last 8 commands (without their arguments)"},
            {"insert_help", "add a new item at a given position"},
            {"login_help", "log in"},
            {"logout_help", "log out, but do not terminate the application"},
            {"register_help", "register a user with the entered username and password"},
            {"remove_transport_help", "remove one element from the collection, the value of the transport field of which is equivalent to the specified one"},
            {"remove_id_help", "remove an item from the collection by its id"},
            {"save_help", "save collection to file"},
            {"show_help", "print to standard output all elements of the collection in string representation"},
            {"sort_help", "sort the collection in natural order"},
            {"update_help", "update the value of the collection element whose id is equal to the given"},
            {"add_title", "Adding an object"},
            {"add_success", "The item was successfully added to the collection"},
            {"add_wrong", "An error occurred while adding an object"},
            {"not_null", "cannot be empty"},
            {"must_double_number", "has to be double"},
            {"must_int_number", "has to be int"},
            {"must_int_plus_number", "has to be greater then zero"},
            {"get_id", "Enter id:"},
            {"delete_success", "Element succsesfully removed"},
            {"delete_not_found", "Failed to delete item: it does not belong to you, or stack id not found"},
            {"delete_wrong", "The item could not be deleted for an unknown reason. Try again later"},
            {"update_not_found", "An element with this id does not exist or is it not yours (ha-ha)"},
            {"update_success", "Element succsesfully updated"},
            {"update_wrong", "Failed to wrap the item for an unknown reason. Please try again later"},
            {"get_transport", "Enter transport"},
            {"not_found_flat_transport", "You do not have an item with this type of transport"}

    };
}
